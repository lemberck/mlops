name: CD - Pull and Deploy

# This workflow is triggered after the CI workflow has successfully completed
on:
  workflow_run:
    workflows: ["CI - Lint, Build, and Push Docker Images"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:  # Adds a manual trigger for the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Ensure the job only runs if the triggering CI workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Configure kubectl to connect to the GKE cluster
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials YOUR_CLUSTER_NAME --zone YOUR_CLUSTER_ZONE --project ${{ secrets.GCP_PROJECT_ID }}

      # Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # Deploy the application using Helm and set the dynamic tags (commit SHA) to pull the right image
      - name: Deploy with Helm
        run: |
          helm upgrade --install sentiment-analysis ./helm-sentiment-analysis-mlops \
            --namespace sentiment-analysis-mlops \
            --create-namespace \
            --set backend.deployment.container.image=${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.PROJECT_NAME }} \
            --set backend.deployment.container.tag=${{ github.sha }} \
            --set frontend.deployment.container.image=${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.PROJECT_NAME }} \
            --set frontend.deployment.container.tag=${{ github.sha }}


      # Verify the deployment on the GKE cluster
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/sentiment-analysis-backend --namespace sentiment-analysis-mlops
          kubectl rollout status deployment/sentiment-analysis-frontend --namespace sentiment-analysis-mlops

      # Add cleanup steps if needed


# Replace YOUR_CLUSTER_NAME with the name of your GKE cluster and YOUR_CLUSTER_ZONE with the zone where your cluster is located. 

# The subsequent Helm and kubectl commands assume that the Helm chart ./helm-sentiment-analysis-mlops is correctly set up to work 
# with your GKE cluster and that the necessary resources (like container images) are accessible.

#  set up the GCP_PROJECT_ID and GCP_SA_KEY (service account key) as secrets in your GitHub repository. The service account 
# should have sufficient permissions to interact with GKE.